#!/usr/bin/env ts-node

// Script TypeScript para gerar 10.000 p√°ginas SEO
import fs from 'fs';
import path from 'path';
import { SEOPageGenerator } from '../utils/seoPageGenerator';
import { generateMassiveTemplateCollection, CATEGORY_CONFIG } from '../data/massiveTemplateGenerator';
import { generateIntelligentTemplateCollection } from '../data/intelligentTemplateGenerator';

async function main() {
  const args = process.argv.slice(2);
  const command = args[0] || 'help';

  console.log('üéØ Gerador de P√°ginas SEO para Wheel Maker');
  console.log('==========================================\n');

  switch (command) {
    case 'generate':
      await generateFullSite();
      break;
    
    case 'sample':
      const count = parseInt(args[1]) || 100;
      await generateSample(count);
      break;
    
    case 'batch':
      const batchSize = parseInt(args[1]) || 1000;
      await generateInBatches(batchSize);
      break;
    
    case 'intelligent':
      const intelligentCount = parseInt(args[1]) || 1000;
      await generateIntelligentSample(intelligentCount);
      break;
    
    case 'intelligent-full':
      await generateIntelligentFullSite();
      break;
    
    case 'compare':
      const compareCount = parseInt(args[1]) || 100;
      await compareGenerators(compareCount);
      break;
    
    case 'stats':
      await showStats();
      break;
    
    case 'intelligent-stats':
      await showIntelligentStats();
      break;
    
    case 'clean':
      await cleanGenerated();
      break;
    
    case 'help':
    default:
      showHelp();
      break;
  }
}

async function generateFullSite() {
  console.log('üöÄ Iniciando gera√ß√£o completa de 10.000 p√°ginas...\n');
  
  const startTime = Date.now();
  
  try {
    const generator = new SEOPageGenerator('./src/generated-pages');
    await generator.generateAllPages();
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log(`\n‚úÖ Gera√ß√£o completa finalizada em ${duration.toFixed(2)} segundos!`);
    console.log('üìÅ Arquivos gerados em: ./src/generated-pages/');
    
    await showGeneratedStats();
    
  } catch (error) {
    console.error('‚ùå Erro durante a gera√ß√£o:', error);
    process.exit(1);
  }
}

async function generateSample(count: number) {
  console.log(`üß™ Gerando amostra de ${count} p√°ginas para teste...\n`);
  
  const startTime = Date.now();
  
  try {
    console.log('üìù Passo 1: Criando inst√¢ncia do SEOPageGenerator...');
    const generator = new SEOPageGenerator('./src/sample-pages');
    console.log('‚úÖ Inst√¢ncia criada com sucesso');
    
    console.log('üìù Passo 2: Gerando templates...');
    const templates = generateMassiveTemplateCollection().slice(0, count);
    console.log(`‚úÖ ${templates.length} templates gerados`);
    
    console.log('üìù Passo 3: Gerando p√°ginas est√°ticas...');
    const staticPages = generator['generateStaticPagesFromTemplates'](templates);
    console.log(`‚úÖ ${staticPages.length} p√°ginas est√°ticas geradas`);
    
    console.log('üìù Passo 4: Definindo propriedades...');
    generator['templates'] = templates;
    generator['staticPages'] = staticPages;
    console.log('‚úÖ Propriedades definidas');
    
    console.log('üìù Passo 5: Criando estrutura de diret√≥rios...');
    await generator.createDirectoryStructure();
    console.log('‚úÖ Estrutura de diret√≥rios criada');
    
    console.log('üìù Passo 6: Gerando p√°ginas individuais...');
    await generator['generateIndividualPages']();
    console.log('‚úÖ P√°ginas individuais geradas');
    
    console.log('üìù Passo 7: Gerando p√°ginas de categoria...');
    await generator['generateCategoryPages']();
    console.log('‚úÖ P√°ginas de categoria geradas');
    
    console.log('üìù Passo 8: Gerando sitemap...');
    await generator['generateSitemapFile']();
    console.log('‚úÖ Sitemap gerado');
    
    console.log(`‚úÖ Amostra de ${count} p√°ginas gerada!`);
    console.log(`üìÅ Arquivos gerados em: ./src/sample-pages/`);
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    console.log(`‚è±Ô∏è  Tempo: ${duration.toFixed(2)} segundos`);
    
    // Mostrar estat√≠sticas da amostra
    console.log('üìù Passo 9: Mostrando estat√≠sticas...');
    await showSampleStats();
    
  } catch (error) {
    console.error('‚ùå Erro durante a gera√ß√£o da amostra:', error);
    if (error instanceof Error) {
      console.error('Stack:', error.stack);
    }
    process.exit(1);
  }
}

async function generateInBatches(batchSize: number) {
  console.log(`üîÑ Iniciando gera√ß√£o em lotes de ${batchSize} p√°ginas...\n`);
  
  const startTime = Date.now();
  
  try {
    const generator = new SEOPageGenerator('./src/generated-pages');
    await generator.generateInBatches(batchSize);
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log(`\n‚úÖ Gera√ß√£o em lotes finalizada em ${duration.toFixed(2)} segundos!`);
    await showGeneratedStats();
    
  } catch (error) {
    console.error('‚ùå Erro durante a gera√ß√£o em lotes:', error);
    process.exit(1);
  }
}

async function showStats() {
  console.log('üìä Estat√≠sticas do Gerador de P√°ginas SEO\n');
  
  const templates = generateMassiveTemplateCollection();
  
  console.log(`üìù Total de templates: ${templates.length.toLocaleString()}`);
  console.log(`üìÇ Total de categorias: ${Object.keys(CATEGORY_CONFIG).length}`);
  
  // Estat√≠sticas por categoria
  console.log('\nüìä Templates por categoria:');
  Object.entries(CATEGORY_CONFIG).forEach(([categoryId, category]: [string, any]) => {
    const count = templates.filter((t: any) => t.category === categoryId).length;
    console.log(`   ${category.icon || 'üìã'} ${category.name}: ${count.toLocaleString()} templates`);
  });
  
  // Estimativa de tamanho
  const estimatedSize = templates.length * 15; // ~15KB por p√°gina
  console.log(`\nüíæ Tamanho estimado: ${(estimatedSize / 1024).toFixed(2)} MB`);
  
  // Tempo estimado
  const estimatedTime = templates.length / 1000 * 30; // ~30s por 1000 p√°ginas
  console.log(`‚è±Ô∏è  Tempo estimado de gera√ß√£o: ${(estimatedTime / 60).toFixed(1)} minutos`);
}

async function showSampleStats() {
  const sampleDir = './src/sample-pages';
  
  if (!fs.existsSync(sampleDir)) {
    console.log('‚ùå Diret√≥rio de p√°ginas de amostra n√£o encontrado');
    return;
  }
  
  console.log('\nüìä Estat√≠sticas da amostra gerada:');
  
  // Contar arquivos
  const wheelsDir = path.join(sampleDir, 'wheels');
  const categoriesDir = path.join(sampleDir, 'categories');
  
  let wheelCount = 0;
  let categoryCount = 0;
  let totalSize = 0;
  
  if (fs.existsSync(wheelsDir)) {
    const wheelFiles = fs.readdirSync(wheelsDir);
    wheelCount = wheelFiles.length;
    
    wheelFiles.forEach(file => {
      const filePath = path.join(wheelsDir, file);
      const stats = fs.statSync(filePath);
      totalSize += stats.size;
    });
  }
  
  if (fs.existsSync(categoriesDir)) {
    const categoryFiles = fs.readdirSync(categoriesDir);
    categoryCount = categoryFiles.length;
    
    categoryFiles.forEach(file => {
      const filePath = path.join(categoriesDir, file);
      const stats = fs.statSync(filePath);
      totalSize += stats.size;
    });
  }
  
  console.log(`üéØ P√°ginas de roda: ${wheelCount.toLocaleString()}`);
  console.log(`üìÇ P√°ginas de categoria: ${categoryCount}`);
  console.log(`üíæ Tamanho total: ${(totalSize / 1024).toFixed(2)} KB`);
  
  // Verificar outros arquivos
  const otherFiles = ['sitemap.xml', 'sitemap-index.xml', 'robots.txt'];
  console.log('\nüìÑ Arquivos auxiliares:');
  
  otherFiles.forEach(file => {
    const filePath = path.join(sampleDir, file);
    if (fs.existsSync(filePath)) {
      const stats = fs.statSync(filePath);
      console.log(`   ‚úÖ ${file} (${(stats.size / 1024).toFixed(1)} KB)`);
    } else {
      console.log(`   ‚ùå ${file} (n√£o encontrado)`);
    }
  });
}

async function showGeneratedStats() {
  const generatedDir = './src/generated-pages';
  
  if (!fs.existsSync(generatedDir)) {
    console.log('‚ùå Diret√≥rio de p√°ginas geradas n√£o encontrado');
    return;
  }
  
  console.log('\nüìä Estat√≠sticas dos arquivos gerados:');
  
  // Contar arquivos
  const wheelsDir = path.join(generatedDir, 'wheels');
  const categoriesDir = path.join(generatedDir, 'categories');
  
  let wheelCount = 0;
  let categoryCount = 0;
  let totalSize = 0;
  
  if (fs.existsSync(wheelsDir)) {
    const wheelFiles = fs.readdirSync(wheelsDir);
    wheelCount = wheelFiles.length;
    
    wheelFiles.forEach(file => {
      const filePath = path.join(wheelsDir, file);
      const stats = fs.statSync(filePath);
      totalSize += stats.size;
    });
  }
  
  if (fs.existsSync(categoriesDir)) {
    const categoryFiles = fs.readdirSync(categoriesDir);
    categoryCount = categoryFiles.length;
    
    categoryFiles.forEach(file => {
      const filePath = path.join(categoriesDir, file);
      const stats = fs.statSync(filePath);
      totalSize += stats.size;
    });
  }
  
  console.log(`üéØ P√°ginas de roda: ${wheelCount.toLocaleString()}`);
  console.log(`üìÇ P√°ginas de categoria: ${categoryCount}`);
  console.log(`üíæ Tamanho total: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);
  
  // Verificar outros arquivos
  const otherFiles = ['sitemap.xml', 'sitemap-index.xml', 'robots.txt', 'routes.ts', 'middleware.ts'];
  console.log('\nüìÑ Arquivos auxiliares:');
  
  otherFiles.forEach(file => {
    const filePath = path.join(generatedDir, file);
    if (fs.existsSync(filePath)) {
      const stats = fs.statSync(filePath);
      console.log(`   ‚úÖ ${file} (${(stats.size / 1024).toFixed(1)} KB)`);
    } else {
      console.log(`   ‚ùå ${file} (n√£o encontrado)`);
    }
  });
}

async function cleanGenerated() {
  const generatedDir = './src/generated-pages';
  const sampleDir = './src/sample-pages';
  const intelligentDir = './src/intelligent-pages';
  
  console.log('üßπ Limpando arquivos gerados...\n');
  
  if (fs.existsSync(generatedDir)) {
    fs.rmSync(generatedDir, { recursive: true, force: true });
    console.log('‚úÖ Diret√≥rio generated-pages removido');
  }
  
  if (fs.existsSync(sampleDir)) {
    fs.rmSync(sampleDir, { recursive: true, force: true });
    console.log('‚úÖ Diret√≥rio sample-pages removido');
  }
  
  if (fs.existsSync(intelligentDir)) {
    fs.rmSync(intelligentDir, { recursive: true, force: true });
    console.log('‚úÖ Diret√≥rio intelligent-pages removido');
  }
  
  console.log('\nüéâ Limpeza conclu√≠da!');
}

async function generateIntelligentSample(count: number) {
  console.log(`üß† Gerando amostra inteligente de ${count} p√°ginas...\n`);
  
  const startTime = Date.now();
  
  try {
    console.log('üìù Passo 1: Criando inst√¢ncia do SEOPageGenerator...');
    const generator = new SEOPageGenerator('./src/intelligent-pages');
    console.log('‚úÖ Inst√¢ncia criada com sucesso');
    
    console.log('üìù Passo 2: Gerando templates inteligentes...');
    const templates = generateIntelligentTemplateCollection(count);
    console.log(`‚úÖ ${templates.length} templates inteligentes gerados`);
    
    console.log('üìù Passo 3: Gerando p√°ginas est√°ticas...');
    const staticPages = generator['generateStaticPagesFromTemplates'](templates);
    console.log(`‚úÖ ${staticPages.length} p√°ginas est√°ticas geradas`);
    
    console.log('üìù Passo 4: Definindo propriedades...');
    generator['templates'] = templates;
    generator['staticPages'] = staticPages;
    console.log('‚úÖ Propriedades definidas');
    
    console.log('üìù Passo 5: Criando estrutura de diret√≥rios...');
    await generator.createDirectoryStructure();
    console.log('‚úÖ Estrutura de diret√≥rios criada');
    
    console.log('üìù Passo 6: Gerando p√°ginas individuais...');
    await generator['generateIndividualPages']();
    console.log('‚úÖ P√°ginas individuais geradas');
    
    console.log('üìù Passo 7: Gerando p√°ginas de categoria...');
    await generator['generateCategoryPages']();
    console.log('‚úÖ P√°ginas de categoria geradas');
    
    console.log('üìù Passo 8: Gerando sitemap...');
    await generator['generateSitemapFile']();
    console.log('‚úÖ Sitemap gerado');
    
    console.log(`‚úÖ Amostra inteligente de ${count} p√°ginas gerada!`);
    console.log(`üìÅ Arquivos gerados em: ./src/intelligent-pages/`);
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    console.log(`‚è±Ô∏è  Tempo: ${duration.toFixed(2)} segundos`);
    
    // Mostrar estat√≠sticas da amostra inteligente
    console.log('üìù Passo 9: Mostrando estat√≠sticas...');
    await showIntelligentSampleStats();
    
  } catch (error) {
    console.error('‚ùå Erro durante a gera√ß√£o da amostra inteligente:', error);
    if (error instanceof Error) {
      console.error('Stack:', error.stack);
    }
    process.exit(1);
  }
}

async function generateIntelligentFullSite() {
  console.log('üß† Iniciando gera√ß√£o inteligente completa de 10.000 p√°ginas...\n');
  
  const startTime = Date.now();
  
  try {
    const generator = new SEOPageGenerator('./src/intelligent-pages');
    
    console.log('üìù Gerando templates inteligentes...');
    const templates = generateIntelligentTemplateCollection(10000);
    console.log(`‚úÖ ${templates.length} templates inteligentes gerados`);
    
    const staticPages = generator['generateStaticPagesFromTemplates'](templates);
    generator['templates'] = templates;
    generator['staticPages'] = staticPages;
    
    await generator.createDirectoryStructure();
    await generator['generateIndividualPages']();
    await generator['generateCategoryPages']();
    await generator['generateSitemapFile']();
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log(`\n‚úÖ Gera√ß√£o inteligente completa finalizada em ${duration.toFixed(2)} segundos!`);
    console.log('üìÅ Arquivos gerados em: ./src/intelligent-pages/');
    
    await showIntelligentGeneratedStats();
    
  } catch (error) {
    console.error('‚ùå Erro durante a gera√ß√£o inteligente:', error);
    process.exit(1);
  }
}

async function compareGenerators(count: number) {
  console.log(`üîç Comparando geradores com ${count} p√°ginas cada...\n`);
  
  const startTime = Date.now();
  
  try {
    // Gerador tradicional
    console.log('üìä Testando gerador tradicional...');
    const traditionalStart = Date.now();
    const traditionalTemplates = generateMassiveTemplateCollection().slice(0, count);
    const traditionalTime = Date.now() - traditionalStart;
    
    // Gerador inteligente
    console.log('üß† Testando gerador inteligente...');
    const intelligentStart = Date.now();
    const intelligentTemplates = generateIntelligentTemplateCollection(count);
    const intelligentTime = Date.now() - intelligentStart;
    
    console.log('\nüìä Resultados da compara√ß√£o:');
    console.log('=====================================');
    
    console.log('\nüîß Gerador Tradicional:');
    console.log(`   ‚è±Ô∏è  Tempo: ${traditionalTime}ms`);
    console.log(`   üìù Templates: ${traditionalTemplates.length}`);
    console.log(`   üéØ Categorias √∫nicas: ${new Set(traditionalTemplates.map(t => t.category)).size}`);
    
    console.log('\nüß† Gerador Inteligente:');
    console.log(`   ‚è±Ô∏è  Tempo: ${intelligentTime}ms`);
    console.log(`   üìù Templates: ${intelligentTemplates.length}`);
    console.log(`   üéØ Categorias √∫nicas: ${new Set(intelligentTemplates.map(t => t.category)).size}`);
    
    // An√°lise de qualidade
    console.log('\nüîç An√°lise de qualidade:');
    
    // Diversidade de t√≠tulos
    const traditionalTitles = new Set(traditionalTemplates.map(t => t.title));
    const intelligentTitles = new Set(intelligentTemplates.map(t => t.title));
    
    console.log(`   üìù T√≠tulos √∫nicos (tradicional): ${traditionalTitles.size}/${traditionalTemplates.length} (${(traditionalTitles.size/traditionalTemplates.length*100).toFixed(1)}%)`);
    console.log(`   üìù T√≠tulos √∫nicos (inteligente): ${intelligentTitles.size}/${intelligentTemplates.length} (${(intelligentTitles.size/intelligentTemplates.length*100).toFixed(1)}%)`);
    
    // Comprimento m√©dio de descri√ß√µes
    const traditionalDescAvg = traditionalTemplates.reduce((sum, t) => sum + t.description.length, 0) / traditionalTemplates.length;
    const intelligentDescAvg = intelligentTemplates.reduce((sum, t) => sum + t.description.length, 0) / intelligentTemplates.length;
    
    console.log(`   üìÑ Comprimento m√©dio descri√ß√£o (tradicional): ${traditionalDescAvg.toFixed(0)} caracteres`);
    console.log(`   üìÑ Comprimento m√©dio descri√ß√£o (inteligente): ${intelligentDescAvg.toFixed(0)} caracteres`);
    
    const endTime = Date.now();
    const totalTime = (endTime - startTime) / 1000;
    console.log(`\n‚è±Ô∏è  Tempo total de compara√ß√£o: ${totalTime.toFixed(2)} segundos`);
    
  } catch (error) {
    console.error('‚ùå Erro durante a compara√ß√£o:', error);
    process.exit(1);
  }
}

async function showIntelligentStats() {
  console.log('üß† Estat√≠sticas do Gerador Inteligente\n');
  
  const templates = generateIntelligentTemplateCollection(1000);
  
  console.log(`üìù Total de templates (amostra): ${templates.length.toLocaleString()}`);
  console.log(`üìÇ Total de categorias: ${Object.keys(CATEGORY_CONFIG).length}`);
  
  // Estat√≠sticas por categoria
  console.log('\nüìä Templates por categoria:');
  Object.entries(CATEGORY_CONFIG).forEach(([categoryId, category]: [string, any]) => {
    const count = templates.filter((t: any) => t.category === categoryId).length;
    console.log(`   ${category.icon || 'üìã'} ${category.name}: ${count.toLocaleString()} templates`);
  });
  
  // An√°lise de qualidade
  const uniqueTitles = new Set(templates.map(t => t.title));
  const uniqueDescriptions = new Set(templates.map(t => t.description));
  
  console.log('\nüîç An√°lise de qualidade:');
  console.log(`   üìù T√≠tulos √∫nicos: ${uniqueTitles.size}/${templates.length} (${(uniqueTitles.size/templates.length*100).toFixed(1)}%)`);
  console.log(`   üìÑ Descri√ß√µes √∫nicas: ${uniqueDescriptions.size}/${templates.length} (${(uniqueDescriptions.size/templates.length*100).toFixed(1)}%)`);
  
  // Comprimento m√©dio
  const avgTitleLength = templates.reduce((sum, t) => sum + t.title.length, 0) / templates.length;
  const avgDescLength = templates.reduce((sum, t) => sum + t.description.length, 0) / templates.length;
  
  console.log(`   üìè Comprimento m√©dio t√≠tulo: ${avgTitleLength.toFixed(0)} caracteres`);
  console.log(`   üìè Comprimento m√©dio descri√ß√£o: ${avgDescLength.toFixed(0)} caracteres`);
  
  // Estimativa de tamanho para 10k
  const estimatedSize = 10000 * 15; // ~15KB por p√°gina
  console.log(`\nüíæ Tamanho estimado (10k p√°ginas): ${(estimatedSize / 1024).toFixed(2)} MB`);
  
  // Tempo estimado
  const estimatedTime = 10000 / 1000 * 35; // ~35s por 1000 p√°ginas (mais lento devido √† complexidade)
  console.log(`‚è±Ô∏è  Tempo estimado de gera√ß√£o: ${(estimatedTime / 60).toFixed(1)} minutos`);
}

async function showIntelligentSampleStats() {
  const intelligentDir = './src/intelligent-pages';
  
  if (!fs.existsSync(intelligentDir)) {
    console.log('‚ùå Diret√≥rio de p√°ginas inteligentes n√£o encontrado');
    return;
  }
  
  console.log('\nüìä Estat√≠sticas da amostra inteligente gerada:');
  
  // Contar arquivos
  const wheelsDir = path.join(intelligentDir, 'wheels');
  const categoriesDir = path.join(intelligentDir, 'categories');
  
  let wheelCount = 0;
  let categoryCount = 0;
  let totalSize = 0;
  
  if (fs.existsSync(wheelsDir)) {
    const wheelFiles = fs.readdirSync(wheelsDir);
    wheelCount = wheelFiles.length;
    
    wheelFiles.forEach(file => {
      const filePath = path.join(wheelsDir, file);
      const stats = fs.statSync(filePath);
      totalSize += stats.size;
    });
  }
  
  if (fs.existsSync(categoriesDir)) {
    const categoryFiles = fs.readdirSync(categoriesDir);
    categoryCount = categoryFiles.length;
    
    categoryFiles.forEach(file => {
      const filePath = path.join(categoriesDir, file);
      const stats = fs.statSync(filePath);
      totalSize += stats.size;
    });
  }
  
  console.log(`üéØ P√°ginas de roda: ${wheelCount.toLocaleString()}`);
  console.log(`üìÇ P√°ginas de categoria: ${categoryCount}`);
  console.log(`üíæ Tamanho total: ${(totalSize / 1024).toFixed(2)} KB`);
  
  // Verificar outros arquivos
  const otherFiles = ['sitemap.xml', 'sitemap-index.xml', 'robots.txt'];
  console.log('\nüìÑ Arquivos auxiliares:');
  
  otherFiles.forEach(file => {
    const filePath = path.join(intelligentDir, file);
    if (fs.existsSync(filePath)) {
      const stats = fs.statSync(filePath);
      console.log(`   ‚úÖ ${file} (${(stats.size / 1024).toFixed(1)} KB)`);
    } else {
      console.log(`   ‚ùå ${file} (n√£o encontrado)`);
    }
  });
}

async function showIntelligentGeneratedStats() {
  const intelligentDir = './src/intelligent-pages';
  
  if (!fs.existsSync(intelligentDir)) {
    console.log('‚ùå Diret√≥rio de p√°ginas inteligentes n√£o encontrado');
    return;
  }
  
  console.log('\nüìä Estat√≠sticas dos arquivos inteligentes gerados:');
  
  // Contar arquivos
  const wheelsDir = path.join(intelligentDir, 'wheels');
  const categoriesDir = path.join(intelligentDir, 'categories');
  
  let wheelCount = 0;
  let categoryCount = 0;
  let totalSize = 0;
  
  if (fs.existsSync(wheelsDir)) {
    const wheelFiles = fs.readdirSync(wheelsDir);
    wheelCount = wheelFiles.length;
    
    wheelFiles.forEach(file => {
      const filePath = path.join(wheelsDir, file);
      const stats = fs.statSync(filePath);
      totalSize += stats.size;
    });
  }
  
  if (fs.existsSync(categoriesDir)) {
    const categoryFiles = fs.readdirSync(categoriesDir);
    categoryCount = categoryFiles.length;
    
    categoryFiles.forEach(file => {
      const filePath = path.join(categoriesDir, file);
      const stats = fs.statSync(filePath);
      totalSize += stats.size;
    });
  }
  
  console.log(`üéØ P√°ginas de roda: ${wheelCount.toLocaleString()}`);
  console.log(`üìÇ P√°ginas de categoria: ${categoryCount}`);
  console.log(`üíæ Tamanho total: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);
  
  // Verificar outros arquivos
  const otherFiles = ['sitemap.xml', 'sitemap-index.xml', 'robots.txt', 'routes.ts', 'middleware.ts'];
  console.log('\nüìÑ Arquivos auxiliares:');
  
  otherFiles.forEach(file => {
    const filePath = path.join(intelligentDir, file);
    if (fs.existsSync(filePath)) {
      const stats = fs.statSync(filePath);
      console.log(`   ‚úÖ ${file} (${(stats.size / 1024).toFixed(1)} KB)`);
    } else {
      console.log(`   ‚ùå ${file} (n√£o encontrado)`);
    }
  });
}

function showHelp() {
  console.log(`Uso: npm run seo:<comando> [op√ß√µes]

Comandos dispon√≠veis:

üîß GERADOR TRADICIONAL:
  seo:generate         Gera todas as 10.000 p√°ginas SEO (tradicional)
  seo:sample [count]   Gera uma amostra de p√°ginas (padr√£o: 100)
  seo:batch [size]     Gera p√°ginas em lotes (padr√£o: 1000)
  seo:stats            Mostra estat√≠sticas dos templates tradicionais

üß† GERADOR INTELIGENTE:
  seo:intelligent [count]     Gera amostra inteligente (padr√£o: 1000)
  seo:intelligent-full        Gera 10.000 p√°ginas com IA
  seo:intelligent-stats       Estat√≠sticas do gerador inteligente
  seo:compare [count]         Compara geradores (padr√£o: 100)

üßπ UTILIT√ÅRIOS:
  seo:clean            Remove todos os arquivos gerados

Exemplos:

  npm run seo:generate
  npm run seo:sample 50
  npm run seo:intelligent 200
  npm run seo:intelligent-full
  npm run seo:compare 100
  npm run seo:stats
  npm run seo:clean

Notas:

  ‚Ä¢ O gerador tradicional usa combina√ß√µes matem√°ticas simples
  ‚Ä¢ O gerador inteligente usa estrat√©gias avan√ßadas de IA
  ‚Ä¢ Use 'compare' para ver diferen√ßas entre os geradores
  ‚Ä¢ A gera√ß√£o completa pode levar v√°rios minutos
  ‚Ä¢ Os arquivos s√£o gerados em ./src/generated-pages/ ou ./src/intelligent-pages/
  ‚Ä¢ Cada p√°gina √© otimizada para SEO com metadados √∫nicos
`);
}

// Executar script
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erro fatal:', error);
    process.exit(1);
  });
}